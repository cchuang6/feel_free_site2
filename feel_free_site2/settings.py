"""
Django settings for feel_free_site2 project.

Generated by 'django-admin startproject' using Django 1.8.4.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import logging
from utils import get_env_variable
import dj_database_url
logger = logging.getLogger(__name__)

PROJECT_APP_PATH = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = (
    'authentication',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'localflavor',
    "gunicorn",
    'compressor',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'feel_free_site2.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'feel_free_site2.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/


###################
# HEROKU SETTINGS #
###################

# Parse database configuration from $DATABASE_URL
DATABASES['default'] = dj_database_url.config()
# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

##################
# DJANGO         #
##################
# TODO: check SCERETE_KEY here
SECRET_KEY = get_env_variable('SITE', 'SECRET_KEY', False)
NEVERCACHE_KEY = get_env_variable('SITE', 'NEVERCACHE_KEY', False)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    )
}
AUTH_USER_MODEL = 'authentication.Account'


###################
# S3 STATIC FILES #
###################

# We are not using SSL. You can change this to "True" and to "https:"
# if you are using a SSL Certificate.
AWS_S3_SECURE_URLS = False
AWS_S3_ENCRYPTION = False
AWS_S3_URL_PROTOCOL = 'http:'

# All files uploaded to AWS S3 will have very long cache headers
# automatically.
AWS_HEADERS = {
 'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
 'Cache-Control': 'max-age=94608000',
}

# You need to set AWS_IS_GZIPPED to True to tell django-storages to
# GZIP all files uploaded to AWS S3.
AWS_IS_GZIPPED = True

# Add missing content types to the list of types
# that should be gzipped.
GZIP_CONTENT_TYPES = (
 'text/css',
 'application/javascript',
 'application/x-javascript',
 'text/javascript'
)

AWS_QUERYSTRING_AUTH = False
# get the key from environment settings
# AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_ACCESS_KEY_ID = get_env_variable('AMAZON_S3', 'AWS_ACCESS_KEY_ID', False)
AWS_SECRET_ACCESS_KEY = get_env_variable('AMAZON_S3',
                                         'AWS_SECRET_ACCESS_KEY', False)
AWS_STORAGE_BUCKET_NAME = get_env_variable('AMAZON_S3',
                                           'AWS_STORAGE_BUCKET_NAME', False)

# tells AWS to add properties to the files, such that when they
# get served from s3 they come with this header telling the browser to cache
# for life
AWS_HEADERS = {
                    'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
                    'Cache-Control': 'max-age=94608000',
                }
# Used to make sure that only changed files are uploaded with collectstatic
AWS_PRELOAD_METADATA = True

DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
MEDIAFILES_LOCATION = 'media'

STATICFILES_LOCATION = 'static'
STATICFILES_STORAGE = 'custom_storages.StaticStorage'

MEDIA_ROOT = ''  # "%s/" % MEDIAFILES_LOCATION
MEDIA_URL = '%s//%s.s3.amazonaws.com/media/'\
            % (AWS_S3_URL_PROTOCOL, AWS_STORAGE_BUCKET_NAME)

COMPRESS_ROOT = STATIC_ROOT = "%s/" % STATICFILES_LOCATION
COMPRESS_URL = STATIC_URL = '%s//%s.s3.amazonaws.com/static/'\
                            % (AWS_S3_URL_PROTOCOL, AWS_STORAGE_BUCKET_NAME)

# ADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'
ADMIN_MEDIA_PREFIX = STATIC_URL + 'grappelli/'
# AWS_STORAGE_BUCKET_NAME = os.environ.get('S3_BUCKET_NAME')
AWS_PRELOAD_METADATA = True  # helps collectstatic do updates

# Enable Compression on all Javascript and CSS used in template.
# The CachedS3BotoStorage both keep local files saved and uploads
# to S3. This is used to make the Compressor module be able to see
# what files have been changed or updated on the temp files on same server
COMPRESS_ENABLED = True
COMPRESS_CSS_FILTERS = ['compressor.filters.css_default.CssAbsoluteFilter',
                        'compressor.filters.cssmin.CSSMinFilter']
# This will ALWAYS be same as our STATICFILES_STORAGE setting.
COMPRESS_STORAGE = 'custom_storages.CachedS3BotoStorage'

##############
#  Parse.com #
##############
PARSE_APPLICATION_ID = get_env_variable('PARSE_TEST', 'PARSE_APPLICATION_ID')
PARSE_REST_API_KEY = get_env_variable('PARSE_TEST', 'PARSE_REST_API_KEY')
PARSE_MASTER_KEY = get_env_variable('PARSE_TEST', 'PARSE_MASTER_KEY')


###########
# LOGGING #
###########

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s] %(levelname)s[%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'mysite.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'propagate': True,
            'level': 'DEBUG',
        },
        'MYAPP': {
            'handlers': ['file'],
            'level': 'DEBUG',
        },
    }
}


##################
# LOCAL SETTINGS #
##################

# Allow any settings to be defined in local_settings.py which should be
# ignored in your version control system allowing for settings to be
# defined per machine.

# Instead of doing "from .local_settings import *", we use exec so that
# local_settings has full access to everything defined in this module.

f = os.path.join(PROJECT_APP_PATH, "local_settings.py")
if os.path.exists(f):
    exec(open(f, "rb").read())
